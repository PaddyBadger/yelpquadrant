html.
  <head>
    <script src="./javascripts/d3.js" charset="utf-8"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <link rel="stylesheet" href="./stylesheets/reset.css">
    <link rel="stylesheet" href="./stylesheets/style.css">
    <link href='http://fonts.googleapis.com/css?family=Metrophobic' rel='stylesheet' type='text/css'>

  </head>
  <body>
  <header>
    <h1>Quadrants</h1>
    <form action="/send" method="get" id="form">
      <label>Search: </label><input type="text" id="search1"<br>
      <label>Location: </label> <input type="text" id="search2">
      <input class="submit" type="submit" value="Search">
      </form>
    
  </header>
    <script>

    $(document).ready(function(e) { 

          $(".submit").click(function(e) {
            $('.text').remove();
            $('.circle').remove();
            e.preventDefault();
            
            var formData = {
              'category': document.getElementById("search1").value,
              'location': document.getElementById("search2").value
            };

            $.ajax({
              type: "GET",
              data: formData,
              url: '/send',
              dataType: 'json'
            }).done(function(data) {
              console.log(data);
              makeRestaurantCircles(data);
              makeRestaurantLabels(data);

            });
            
          });

            var svgWidth = 800;
            var svgHeight = 800;
            var offset = 5;
            var padding = 50;
            var svgContainer = d3.select("body").append("svg")
                                         .attr("width", svgWidth+2*padding+offset)
                                         .attr("height", svgHeight+2*padding+offset);
            
            var axisScale = d3.scale.linear().domain([-10,10]).range([padding, svgWidth+padding+(offset/2)]);

        var makeGraphSquares = function(){
            var graphSquaresGroup = svgContainer.append("g");
            var quadcoords = [];
            quadcoords.push({x:padding, y:padding});
            quadcoords.push({x:svgWidth/2+offset+padding, y:padding});
            quadcoords.push({x:padding, y:(svgHeight/2)+offset+padding});
            quadcoords.push({x:(svgWidth/2)+offset+padding, y:(svgHeight/2)+offset+padding});

            var squarecoordinates = [];

            var sqperquad = 30;
            for (var s = 0; s< quadcoords.length; s++){
                for(var i = 0; i<sqperquad; i++){
                    for (var j=0; j< sqperquad; j++){
                        squarecoordinates.push({x: i*(svgWidth/(sqperquad*2))+quadcoords[s].x, y: j*(svgHeight/(sqperquad*2))+quadcoords[s].y});
                    }
                }
            }

            var squares = graphSquaresGroup.selectAll("rect .grid")
                .data(squarecoordinates)
                .enter().append("rect");
                console.log('push all squares');

            var squareAttributes = squares
                .attr("x", function(d) { return d.x; })
                .attr("y", function(d) { return d.y; })
                .attr("width", 8)
                .attr("height", 8)
                .attr("class", "grid")
                .style("fill", "ADFFD6");
          };

        var makeRestaurantCircles = function(jsonData){

             var restaurantCircleBackground = svgContainer.selectAll("rect .background")
                  .data(jsonData)
                  .enter()
                  .append("rect");

              var restaurantCircleAttributes = restaurantCircleBackground
                  .attr("x", function(d) { 
                  var oldx = Math.floor((axisScale(d.old_news)-padding)/(13.333333333));
                  //console.log(oldx);
                  var newx = oldx*(13.3333333333)+padding;
                  if(newx>(svgHeight/2)+padding){
                  newx+=offset;

                  }
                 //console.log(newx)

                  return newx})
                  .attr("y", function (d) {
                  var oldy = Math.floor((axisScale(d.extroverted)-padding)/(13.333333333333));
                  //console.log(oldy);
                  var newy = oldy*(13.33333333333)+padding;
                  if(newy>(svgHeight/2)+padding){
                  newy+=offset;

                  }
                 //console.log(newy)

                  return newy})
                  .attr("width", 8)
                  .attr("height", 8)
                  .attr("class", "background")
                  .style("stroke", "white")
                  .style("fill", "#3BA66E")
                  .style("stroke-width", "10 px")
                  .style("cursor", "pointer")
                  .on("click", function (d) {window.open(d.url, "_blank")})
                  .on("mouseover", function() { d3.select(d3.event.target).style("fill", "gray"); })
                  .on("mouseout", function() { d3.select(d3.event.target).style("fill", "#3BA66E"); });
        };

      var makeRestaurantLabels = function(jsonData){
          var restaurantTextGroup = svgContainer.append("g");

          var restaurantText = restaurantTextGroup.selectAll("text .text")
                            .data(jsonData)
                            .enter()
                            .append("text");

            var restaurantLabels = restaurantText
                   .attr("x", function(d) { return axisScale(d.old_news)+12})
                   .attr("y", function (d) {return axisScale(d.extroverted)+8})
                   .text( function (d) { return d.name + " " + d.price_range})
                   .attr("font-size", "16px")
                   .attr("fill", "black")
                   .style("text-decoration", "underline")
                   .on("click", function (d) {window.open(d.url, "_blank")})
                   .on("mouseover", function() { d3.select(d3.event.target).attr("fill", "gray"); })
                   .on("mouseout", function() { d3.select(d3.event.target).attr("fill", "black"); })
                   .style("cursor", "pointer")
                   .attr("class", "text");

            var infoBackgroundGroup = svgContainer.append("g")

            var infoBackground = infoBackgroundGroup.selectAll("rect .infoText")
                    .data(jsonData)
                    .enter()
                    .append("rect");

            var backgroundRect = infoBackground
                 .attr("x", function(d) { return axisScale(d.old_news)+12})
                  .attr("y", function (d) {return axisScale(d.extroverted)+10})
                  .attr("width", 200)
                  .attr("height", 20)
                  .attr("class", "infoBackground")
                  .attr("fill", "white");

            var restaurantInfoGroup = svgContainer.append("g");

            var restaurantInfo = restaurantInfoGroup.selectAll("text .infoText")
                            .data(jsonData)
                            .enter()
                            .append("text");

            var restaurantMoreInfo = restaurantInfo
                   .attr("x", function(d) { return axisScale(d.old_news)+12})
                   .attr("y", function (d) {return axisScale(d.extroverted)+20})
                   .text( function (d) { return d.address})
                   .attr("font-size", "12px")
                   .attr("fill", "black")
                   .attr("class", "infoText");
      };

      var makeLabel = function(){

        var labelGroup = svgContainer.append("g");       
        var labelArray = [["Introverted", [-11, 0]], ["Extroverted", [8, 0]], ["Old News", [-1, -10.5]], ["Undiscovered", [-1.5, 10.5]]];
        var labelSet = labelGroup.selectAll("text").data(labelArray).enter().append("text");
        var labelAttributes = labelSet
                .attr("x", function(d){return axisScale(d[1][0])})
                .attr("y", function(d){return axisScale(d[1][1])})
                          .text(function(d){return d[0]})
                          .attr("font-family", "monospace")
                          .style("font-weight","bold")
                          .style("font-size", "20")
                          .attr("fill", "black");

        var labelSquareGroup = svgContainer.append("g");       
        var labelSquares = labelSquareGroup.selectAll("square").data(labelArray).enter().append("square");
        var labelAttributes = labelSquares
                .attr("x", function(d){return axisScale(d[1][0])})
                .attr("y", function(d){return axisScale(d[1][1])})
                .attr("width", 5)
                .attr("height", 5);
      };
      makeGraphSquares();
      makeLabel();
     });

    </script>
   
  </body>
  </html>

